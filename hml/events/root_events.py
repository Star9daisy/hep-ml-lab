import inflection
import uproot
from typeguard import typechecked

from ..operations.uproot_ops import constituents_to_momentum4d
from ..types import AwkwardArray, PathLike, UprootTree, pathlike_to_path
from .events import Events


@typechecked
class ROOTEvents(Events):
    """A class for events stored in a ROOT file generated by Delphes.

    The original keys are expanded to underscore lower case.

    Parameters
    ----------
    tree : uproot.tree.TTree
        The ROOT tree opened by `uproot`.
    """

    def __init__(self, tree: UprootTree) -> None:
        self._tree = tree

        # Convert the original keys to underscore lower case
        mixed_case = tree.keys(full_paths=False)
        snake_case = [inflection.underscore(key) for key in mixed_case]
        camel_case = [inflection.camelize(key) for key in mixed_case]
        lower_case = [key.lower() for key in mixed_case]

        # Relate new keys to the original ones
        mappings = {}
        mappings.update({key: key for key in mixed_case})
        mappings.update({snake: mixed for snake, mixed in zip(snake_case, mixed_case)})
        mappings.update({camel: mixed for camel, mixed in zip(camel_case, mixed_case)})
        mappings.update({lower: mixed for lower, mixed in zip(lower_case, mixed_case)})
        self._mappings = mappings

        self._keys = list(mappings.keys())

    def __len__(self) -> int:
        return self.tree.num_entries

    def __getitem__(self, key: str) -> AwkwardArray:
        lowered_key = inflection.underscore(key).replace("_", "")
        if lowered_key not in self.mappings:
            raise KeyError(f"Key '{key}' not found in the events.")

        true_key = self.mappings[lowered_key]
        array = self.tree[true_key].array()

        if array.layout[-1].parameters.get("__record__") not in ["TRef", "TRefArray"]:
            return array

        # Currently only supports to retrieve jet-related constituents
        if "Jet" in true_key and "Constituents" in true_key:
            return constituents_to_momentum4d(self.tree[true_key])

        else:
            raise ValueError("Only jet-related constituents are supported.")

    @property
    def tree(self) -> UprootTree:
        """The ROOT tree opened by `uproot`."""
        return self._tree

    @property
    def mappings(self) -> dict[str, str]:
        """A dictionary mapping different cases of the keys to the original one."""
        return self._mappings

    @property
    def keys(self) -> list[str]:
        """A list of all the available keys in the events."""
        return self._keys

    @classmethod
    def load(cls, file_path: PathLike) -> "ROOTEvents":
        """Load events from a ROOT file.

        Parameters
        ----------
        file_path : PathLike
            The path to the ROOT file.
        """
        file_path = pathlike_to_path(file_path)

        if not file_path.suffix == ".root":
            raise ValueError(
                f"Invalid file extension '{file_path.suffix}', expected '.root'."
            )

        file = uproot.open(file_path)
        tree = file["Delphes"]

        return cls(tree=tree)
