import inflection
import uproot
from typeguard import typechecked

from ..types import AwkwardArray, PathLike, UprootTree, pathlike_to_path
from .events import Events


@typechecked
class ROOTEvents(Events):
    """A class for events stored in a ROOT file generated by Delphes.

    The original keys are expanded to underscore lower case.

    Parameters
    ----------
    tree : uproot.tree.TTree
        The ROOT tree opened by `uproot`.
    """

    def __init__(self, tree: UprootTree) -> None:
        self._tree = tree

        # Convert the original keys to underscore lower case
        keys = tree.keys(full_paths=False)
        snake_case = [inflection.underscore(key) for key in keys]

        # Relate new keys to the original ones
        mappings = {}
        mappings.update({k: k for k in keys})
        mappings.update({snake: k for snake, k in zip(snake_case, keys)})
        self._mappings = mappings

        self._keys = list(mappings.keys())

    def __len__(self) -> int:
        return self.tree.num_entries

    def __getitem__(self, key: str) -> AwkwardArray:
        if key not in self.keys:
            raise KeyError(f"Key '{key}' not found in the events.")

        return self.tree[self.mappings[key]].array()

    @property
    def tree(self) -> UprootTree:
        """The ROOT tree opened by `uproot`."""
        return self._tree

    @property
    def mappings(self) -> dict[str, str]:
        """A dictionary mapping different cases of the keys to the original one."""
        return self._mappings

    @property
    def keys(self) -> list[str]:
        """A list of all the available keys in the events."""
        return self._keys

    @classmethod
    def load(cls, file_path: PathLike) -> "ROOTEvents":
        """Load events from a ROOT file.

        Parameters
        ----------
        file_path : PathLike
            The path to the ROOT file.
        """
        file_path = pathlike_to_path(file_path)

        if not file_path.suffix == ".root":
            raise ValueError(
                f"Invalid file extension '{file_path.suffix}', expected '.root'."
            )

        file = uproot.open(file_path)
        tree = file["Delphes"]

        return cls(tree=tree)
